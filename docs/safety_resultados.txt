

[33m[1m+===========================================================================================================================================================================================+[0m


[31m[1mDEPRECATED: [0m[33m[1mthis command (`check`) has been DEPRECATED, and will be unsupported beyond 01 June 2024.[0m


[32mWe highly encourage switching to the new [0m[32m[1m`scan`[0m[32m command which is easier to use, more powerful, and can be set up to mimic the deprecated command if required.[0m


[33m[1m+===========================================================================================================================================================================================+[0m


+==============================================================================+

                               /$$$$$$            /$$
                              /$$__  $$          | $$
           /$$$$$$$  /$$$$$$ | $$  \__//$$$$$$  /$$$$$$   /$$   /$$
          /$$_____/ |____  $$| $$$$   /$$__  $$|_  $$_/  | $$  | $$
         |  $$$$$$   /$$$$$$$| $$_/  | $$$$$$$$  | $$    | $$  | $$
          \____  $$ /$$__  $$| $$    | $$_____/  | $$ /$$| $$  | $$
          /$$$$$$$/|  $$$$$$$| $$    |  $$$$$$$  |  $$$$/|  $$$$$$$
         |_______/  \_______/|__/     \_______/   \___/   \____  $$
                                                          /$$  | $$
                                                         |  $$$$$$/
  by safetycli.com                                        \______/

+==============================================================================+

 [1mREPORT[0m 

  Safety [1mv3.6.0[0m is scanning for [1mVulnerabilities[0m[1m...[0m
[1m  Scanning dependencies[0m in your [1mfiles:[0m

  -> requirements.txt

  Using [1mopen-source vulnerability database[0m
[1m  Found and scanned 263 packages[0m
  Timestamp [1m2025-07-13 19:39:57[0m
[1m  73[0m[1m vulnerabilities reported[0m
[1m  0[0m[1m vulnerabilities ignored[0m

+==============================================================================+
 [1mVULNERABILITIES REPORTED[0m 
+==============================================================================+

[31m-> Vulnerability found in zipp version 1.0.0[0m
[1m   Vulnerability ID: [0m72132
[1m   Affected spec: [0m<3.19.1
[1m   ADVISORY: [0mA Denial of Service (DoS) vulnerability exists in the
   jaraco/zipp library. The vulnerability is triggered when processing a
   specially crafted zip file that leads to an infinite loop. This issue also
   impacts the zipfile module of CPython, as features from the third-party
   zipp library are later merged into CPython, and the affected code is
   identical in both projects. The infinite loop can be initiated through the
   use of functions affecting the `Path` module in both zipp and zipfile,
   such as `joinpath`, the overloaded division operator, and `iterdir`.
   Although the infinite loop is not resource exhaustive, it prevents the
   application from responding.
[1m   CVE-2024-5569[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/72132/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 72132 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in werkzeug version 2.2.3[0m
[1m   Vulnerability ID: [0m71594
[1m   Affected spec: [0m<3.0.3
[1m   ADVISORY: [0mWerkzeug is a comprehensive WSGI web application
   library. The debugger in affected versions of Werkzeug can allow an
   attacker to execute code on a developer's machine under some
   circumstances. This requires the attacker to get the developer to interact
   with a domain and subdomain they control, and enter the debugger PIN, but
   if they are successful it allows access to the debugger even if it is only
   running on localhost. This also requires the attacker to guess a URL in
   the developer's application that will trigger the debugger.
[1m   CVE-2024-34069[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/71594/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 71594 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in werkzeug version 2.2.3[0m
[1m   Vulnerability ID: [0m71595
[1m   Affected spec: [0m<=2.3.7
[1m   ADVISORY: [0mWerkzeug is a comprehensive WSGI web application
   library. If an upload of a file that starts with CR or LF and then is
   followed by megabytes of data without these characters: all of these bytes
   are appended chunk by chunk into internal bytearray and lookup for
   boundary is performed on growing buffer. This allows an attacker to cause
   a denial of service by sending crafted multipart data to an endpoint that
   will parse it. The amount of CPU time required can block worker processes
   from handling legitimate requests.
[1m   CVE-2023-46136[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/71595/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 71595 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in werkzeug version 2.2.3[0m
[1m   Vulnerability ID: [0m73969
[1m   Affected spec: [0m<3.0.6
[1m   ADVISORY: [0mAffected versions of Werkzeug are vulnerable to Path
   Traversal (CWE-22) on Windows systems running Python versions below 3.11.
   The safe_join() function failed to properly detect certain absolute paths
   on Windows, allowing attackers to potentially access files outside the
   intended directory. An attacker could craft special paths starting with
   "/" that bypass the directory restrictions on Windows systems. The
   vulnerability exists in the safe_join() function which relied solely on
   os.path.isabs() for path validation. This is exploitable on Windows
   systems by passing paths starting with "/" to safe_join(). To remediate,
   upgrade to the latest version which includes additional path validation
   checks. NOTE: This vulnerability specifically affects Windows systems
   running Python versions below 3.11 where ntpath.isabs() behavior differs.
[1m   CVE-2024-49766[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/73969/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 73969 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in werkzeug version 2.2.3[0m
[1m   Vulnerability ID: [0m73889
[1m   Affected spec: [0m<3.0.6
[1m   ADVISORY: [0mAffected versions of Werkzeug are potentially vulnerable
   to resource exhaustion when parsing file data in forms. Applications using
   'werkzeug.formparser.MultiPartParser' to parse 'multipart/form-data'
   requests (e.g. all flask applications) are vulnerable to a relatively
   simple but effective resource exhaustion (denial of service) attack. A
   specifically crafted form submission request can cause the parser to
   allocate and block 3 to 8 times the upload size in main memory. There is
   no upper limit; a single upload at 1 Gbit/s can exhaust 32 GB of RAM in
   less than 60 seconds.
[1m   CVE-2024-49767[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/73889/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 73889 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in werkzeug version 2.2.3[0m
[1m   Vulnerability ID: [0m62019
[1m   Affected spec: [0m<2.3.8
[1m   ADVISORY: [0mWerkzeug 3.0.1 and 2.3.8 include a security fix: Slow
   multipart parsing for large parts potentially enabling DoS attacks.https:/
   /github.com/pallets/werkzeug/commit/b1916c0c083e0be1c9d887ee2f3d696922bfc5
   c1
[1m   PVE-2023-62019[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/62019/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 62019 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in urllib3 version 1.26.5[0m
[1m   Vulnerability ID: [0m71608
[1m   Affected spec: [0m<=1.26.18
[1m   ADVISORY: [0mUrllib3's ProxyManager ensures that the Proxy-
   Authorization header is correctly directed only to configured proxies.
   However, when HTTP requests bypass urllib3's proxy support, there's a risk
   of inadvertently setting the Proxy-Authorization header, which remains
   ineffective without a forwarding or tunneling proxy. Urllib3 does not
   recognize this header as carrying authentication data, failing to remove
   it during cross-origin redirects. While this scenario is uncommon and
   poses low risk to most users, urllib3 now proactively removes the Proxy-
   Authorization header during cross-origin redirects as a precautionary
   measure. Users are advised to utilize urllib3's proxy support or disable
   automatic redirects to handle the Proxy-Authorization header securely.
   Despite these precautions, urllib3 defaults to stripping the header to
   safeguard users who may inadvertently misconfigure requests.
[1m   CVE-2024-37891[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/71608/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 71608 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in urllib3 version 1.26.5[0m
[1m   Vulnerability ID: [0m61601
[1m   Affected spec: [0m<1.26.17
[1m   ADVISORY: [0mUrllib3 1.26.17 and 2.0.5 include a fix for
   CVE-2023-43804: Urllib3 doesn't treat the 'Cookie' HTTP header special or
   provide any helpers for managing cookies over HTTP, that is the
   responsibility of the user. However, it is possible for a user to specify
   a 'Cookie' header and unknowingly leak information via HTTP redirects to a
   different origin if that user doesn't disable redirects explicitly.https:/
   /github.com/urllib3/urllib3/security/advisories/GHSA-v845-jxx5-vc9f
[1m   CVE-2023-43804[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/61601/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 61601 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in urllib3 version 1.26.5[0m
[1m   Vulnerability ID: [0m61893
[1m   Affected spec: [0m<1.26.18
[1m   ADVISORY: [0mAffected versions of urllib3 are vulnerable to an HTTP
   redirect handling vulnerability that fails to remove the HTTP request body
   when a POST changes to a GET via 301, 302, or 303 responses. This flaw can
   expose sensitive request data if the origin service is compromised and
   redirects to a malicious endpoint, though exploitability is low when no
   sensitive data is used. The vulnerability affects automatic redirect
   behavior. It is fixed in versions 1.26.18 and 2.0.7; update or disable
   redirects using redirects=False.This vulnerability is specific to Python's
   urllib3 library.
[1m   CVE-2023-45803[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/61893/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 61893 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in tornado version 6.3.3[0m
[1m   Vulnerability ID: [0m71957
[1m   Affected spec: [0m<=6.4.0
[1m   ADVISORY: [0mWhen Tornado receives a request with two Transfer-
   Encoding: chunked headers, it ignores them both. This enables request
   smuggling when Tornado is deployed behind a proxy server that emits such
   requests. Pound does this.
[1m   PVE-2024-71957[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/71957/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 71957 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in tornado version 6.3.3[0m
[1m   Vulnerability ID: [0m71956
[1m   Affected spec: [0m<6.4.1
[1m   ADVISORY: [0mTornado’s curl_httpclient.CurlAsyncHTTPClient class is
   vulnerable to CRLF (carriage return/line feed) injection in the request
   headers.
[1m   PVE-2024-71956[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/71956/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 71956 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in tornado version 6.3.3[0m
[1m   Vulnerability ID: [0m77319
[1m   Affected spec: [0m<6.5.0
[1m   ADVISORY: [0mWhen Tornado's multipart/form-data parser encounters
   certain errors, it logs a warning but continues trying to parse the
   remainder of the data. This allows remote attackers to generate an
   extremely high volume of logs, constituting a DoS attack. This DoS is
   compounded by the fact that the logging subsystem is synchronous.
[1m   CVE-2025-47287[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/77319/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 77319 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in tornado version 6.3.3[0m
[1m   Vulnerability ID: [0m74439
[1m   Affected spec: [0m<6.4.2
[1m   ADVISORY: [0mTornado web framework affected versions contain a
   performance vulnerability in their HTTP cookie parser. When processing
   specially crafted malicious cookie headers, the parser's algorithm can
   exhibit quadratic time complexity. Since this parsing happens in the main
   event loop thread, it can cause the server to become unresponsive and
   block the processing of other incoming requests due to excessive CPU
   usage.
[1m   CVE-2024-52804[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/74439/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 74439 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in torch version 2.0.1[0m
[1m   Vulnerability ID: [0m71671
[1m   Affected spec: [0m<2.2.0
[1m   ADVISORY: [0mPyTorch before v2.2.0 was discovered to contain a heap
   buffer overflow vulnerability in the component
   /runtime/vararg_functions.cpp. This vulnerability allows attackers to
   cause a Denial of Service (DoS) via a crafted input.
[1m   CVE-2024-31580[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/71671/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 71671 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in torch version 2.0.1[0m
[1m   Vulnerability ID: [0m71672
[1m   Affected spec: [0m<2.2.0
[1m   ADVISORY: [0mPytorch before version v2.2.0 was discovered to contain
   a use-after-free vulnerability in torch/csrc/jit/mobile/interpreter.cpp.
[1m   CVE-2024-31583[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/71672/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 71672 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in torch version 2.0.1[0m
[1m   Vulnerability ID: [0m76769
[1m   Affected spec: [0m<=2.6.0
[1m   ADVISORY: [0m*Disputed* A vulnerability, which was classified as
   problematic, was found in PyTorch 2.6.0. Affected is the function
   torch.nn.functional.ctc_loss of the file aten/src/ATen/native/LossCTC.cpp.
   The manipulation leads to denial of service. An attack has to be
   approached locally. The exploit has been disclosed to the public and may
   be used. The name of the patch is
   46fc5d8e360127361211cb237d5f9eef0223e567. It is recommended to apply a
   patch to fix this issue.
[1m   CVE-2025-3730[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/76769/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 76769 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in torch version 2.0.1[0m
[1m   Vulnerability ID: [0m76771
[1m   Affected spec: [0m<2.6.0
[1m   ADVISORY: [0mPyTorch is a Python package that provides tensor
   computation with strong GPU acceleration and deep neural networks built on
   a tape-based autograd system. In version 2.5.1 and prior, a Remote Command
   Execution (RCE) vulnerability exists in PyTorch when loading a model using
   torch.load with weights_only=True. This issue has been patched in version
   2.6.0.
[1m   CVE-2025-32434[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/76771/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 76771 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in requests version 2.31.0[0m
[1m   Vulnerability ID: [0m71064
[1m   Affected spec: [0m<2.32.2
[1m   ADVISORY: [0mAffected versions of Requests, when making requests
   through a Requests `Session`, if the first request is made with
   `verify=False` to disable cert verification, all subsequent requests to
   the same host will continue to ignore cert verification regardless of
   changes to the value of `verify`. This behavior will continue for the
   lifecycle of the connection in the connection pool. Requests 2.32.0 fixes
   the issue, but versions 2.32.0 and 2.32.1 were yanked due to conflicts
   with CVE-2024-35195 mitigation.
[1m   CVE-2024-35195[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/71064/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 71064 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in pyjwt version 2.3.0[0m
[1m   Vulnerability ID: [0m48542
[1m   Affected spec: [0m>=1.5.0,<2.4.0
[1m   ADVISORY: [0mPyJWT 2.4.0 includes a fix for CVE-2022-29217: An
   attacker submitting the JWT token can choose the used signing algorithm.
   The PyJWT library requires that the application chooses what algorithms
   are supported. The application can specify
   'jwt.algorithms.get_default_algorithms()' to get support for all
   algorithms, or specify a single algorithm. The issue is not that big as
   'algorithms=jwt.algorithms.get_default_algorithms()' has to be used. As a
   workaround, always be explicit with the algorithms that are accepted and
   expected when decoding.
[1m   CVE-2022-29217[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/48542/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 48542 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in pyjwt version 2.3.0[0m
[1m   Vulnerability ID: [0m74429
[1m   Affected spec: [0m<2.10.1
[1m   ADVISORY: [0mAffected versions of pyjwt are vulnerable to Partial
   Comparison (CWE-187). This flaw allows attackers to bypass issuer (iss)
   verification by providing partial matches, potentially granting
   unauthorized access. The vulnerability arises in the decode method of
   api_jwt.py, where issuer validation incorrectly treats strings as
   sequences, leading to partial matches (e.g., "abc" being accepted for
   "__abc__"). Exploiting this requires crafting JWTs with partially matching
   iss claims, which is straightforward.
[1m   CVE-2024-53861[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/74429/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 74429 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in pygame version 2.5.1[0m
[1m   Vulnerability ID: [0m61494
[1m   Affected spec: [0m<2.5.2
[1m   ADVISORY: [0mPygame 2.5.2 updates its C dependency 'libwebp' to
   v1.3.2 to include a fix for a high-risk vulnerability.https://github.com/p
   ygame/pygame/commit/94d6c94eae1df106909ca61c18224849cd1f042e
[1m   CVE-2023-4863[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/61494/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 61494 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in pygame version 2.5.1[0m
[1m   Vulnerability ID: [0m73475
[1m   Affected spec: [0m<2.6.0
[1m   ADVISORY: [0mAffected versions of pygame are vulnerable to a file
   squatting vulnerability (CWE-377). This vulnerability could allow an
   attacker to manipulate temporary files, potentially leading to
   unauthorized data access or corruption. The vulnerability arises from the
   use of tempfile.mktemp(), which creates a race condition. The patch
   mitigates this issue by using tempfile.NamedTemporaryFile(delete=False),
   which securely creates temporary files. Users should ensure that temporary
   files are not reopened by name in an unsafe manner to avoid potential
   exploitation. This advisory is relevant for Python versions prior to the
   introduction of safer temporary file handling practices.
[1m   PVE-2024-73475[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/73475/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 73475 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in pycryptodomex version 3.11.0[0m
[1m   Vulnerability ID: [0m65208
[1m   Affected spec: [0m>=0,<3.19.1
[1m   ADVISORY: [0mPyCryptodome and pycryptodomex before 3.19.1 allow side-
   channel leakage for OAEP decryption, exploitable for a Manger attack.
[1m   CVE-2023-52323[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/65208/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 65208 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in protobuf version 3.12.4[0m
[1m   Vulnerability ID: [0m50474
[1m   Affected spec: [0m<3.15.0
[1m   ADVISORY: [0mProtobuf 3.15.0 includes a fix for CVE-2021-22570:
   Nullptr dereference when a null char is present in a proto symbol. The
   symbol is parsed incorrectly, leading to an unchecked call into the proto
   file's name during generation of the resulting error message. Since the
   symbol is incorrectly parsed, the file is nullptr.
[1m   CVE-2021-22570[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/50474/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 50474 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in protobuf version 3.12.4[0m
[1m   Vulnerability ID: [0m51167
[1m   Affected spec: [0m<3.18.3
[1m   ADVISORY: [0mProtobuf 3.18.3, 3.19.5, 3.20.2 and 4.21.6 include a fix
   for CVE-2022-1941: A parsing vulnerability for the MessageSet type in the
   ProtocolBuffers versions prior to and including 3.16.1, 3.17.3, 3.18.2,
   3.19.4, 3.20.1 and 3.21.5 for protobuf-cpp, and versions prior to and
   including 3.16.1, 3.17.3, 3.18.2, 3.19.4, 3.20.1 and 4.21.5 for protobuf-
   python can lead to out of memory failures. A specially crafted message
   with multiple key-value per elements creates parsing issues, and can lead
   to a Denial of Service against services receiving unsanitized input.https:
   //github.com/protocolbuffers/protobuf/security/advisories/GHSA-8gq9-2x98-
   w8hf
[1m   CVE-2022-1941[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/51167/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 51167 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in paramiko version 2.9.3[0m
[1m   Vulnerability ID: [0m63227
[1m   Affected spec: [0m<3.4.0
[1m   ADVISORY: [0mParamiko 3.4.0 has been released to fix vulnerabilities
   affecting encrypt-then-MAC digest algorithms in tandem with CBC ciphers,
   and ChaCha20-poly1305. The fix requires cooperation from both ends of the
   connection, making it effective when the remote end is OpenSSH >= 9.6 and
   configured to use the new “strict kex” mode. For further details, refer to
   the official Paramiko documentation or GitHub
   repository.https://github.com/advisories/GHSA-45x7-px36-x8w8
[1m   CVE-2023-48795[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/63227/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 63227 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in oauthlib version 3.2.0[0m
[1m   Vulnerability ID: [0m50959
[1m   Affected spec: [0m>=3.1.1,<3.2.1
[1m   ADVISORY: [0mOAuthLib 3.2.1 includes a fix for CVE-2022-36087: In
   OAuthLib versions 3.1.1 until 3.2.1, an attacker providing malicious
   redirect uri can cause denial of service. An attacker can also leverage
   usage of 'uri_validate' functions depending where it is used. OAuthLib
   applications using OAuth2.0 provider support or use directly
   'uri_validate' are affected by this issue. There are no known workarounds.
   https://github.com/oauthlib/oauthlib/security/advisories/GHSA-3pgj-
   pg6c-r5p7
[1m   CVE-2022-36087[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/50959/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 50959 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in notebook version 7.0.4[0m
[1m   Vulnerability ID: [0m72963
[1m   Affected spec: [0m>=7.0.0,<=7.2.1
[1m   ADVISORY: [0mJupyter Notebook is vulnerable to HTML injection,
   leading to DOM Clobbering, which allows attackers to access sensitive data
   and perform arbitrary actions as the compromised user. This vulnerability
   occurs when a user opens a malicious notebook with Markdown cells or a
   Markdown file in JupyterLab.
[1m   CVE-2024-43805[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/72963/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 72963 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in notebook version 7.0.4[0m
[1m   Vulnerability ID: [0m65182
[1m   Affected spec: [0m>=7.0.0,<=7.0.6
[1m   ADVISORY: [0mCVE-2024-22421 is a vulnerability in Jupyter Notebook
   where clicking a malicious link could expose Authorization and XSRFToken
   tokens to third parties in older jupyter-server versions. Patched versions
   include notebook above 7.0.7. Users are advised to upgrade jupyter-server
   to version 2.7.2 or newer, which includes a fix for a redirect
   vulnerability. No other workaround has been identified. https://github.com
   /jupyterlab/jupyterlab/security/advisories/GHSA-44cc-43rp-5947
[1m   CVE-2024-22421[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/65182/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 65182 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in notebook version 7.0.4[0m
[1m   Vulnerability ID: [0m65183
[1m   Affected spec: [0m>=7.0.0,<=7.0.6
[1m   ADVISORY: [0mCVE-2024-22420 describes a vulnerability in Jupyter
   Notebook, where user interaction with a malicious notebook or Markdown
   file enables an attacker to access and act with the same permissions as
   the user. The flaw lies in the table of contents plugin. Jupyter Notebook
   v7.0.7 includes a patch for this issue. Users can manually disable the
   plugin as a workaround. https://github.com/jupyterlab/jupyterlab/security/
   advisories/GHSA-4m77-cmpx-vjc4
[1m   CVE-2024-22420[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/65183/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 65183 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in lxml version 4.8.0[0m
[1m   Vulnerability ID: [0m50748
[1m   Affected spec: [0m<4.9.1
[1m   ADVISORY: [0mLxml 4.9.1 includes a fix for CVE-2022-2309: NULL
   Pointer Dereference allows attackers to cause a denial of service (or
   application crash). This only applies when lxml is used together with
   libxml2 2.9.10 through 2.9.14. libxml2 2.9.9 and earlier are not affected.
   It allows triggering crashes through forged input data, given a vulnerable
   code sequence in the application. The vulnerability is caused by the
   iterwalk function (also used by the canonicalize function). Such code
   shouldn't be in wide-spread use, given that parsing + iterwalk would
   usually be replaced with the more efficient iterparse function. However,
   an XML converter that serialises to C14N would also be vulnerable, for
   example, and there are legitimate use cases for this code sequence. If
   untrusted input is received (also remotely) and processed via iterwalk
   function, a crash can be triggered.
[1m   CVE-2022-2309[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/50748/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 50748 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in jupyterlab version 4.0.6[0m
[1m   Vulnerability ID: [0m64588
[1m   Affected spec: [0m>=4.0.0,<=4.0.10
[1m   ADVISORY: [0mCVE-2024-22421 is a vulnerability in Jupyter Notebook
   where clicking a malicious link could expose Authorization and XSRFToken
   tokens to third parties in older jupyter-server versions. Patched versions
   include JupyterLab 4.1.0b2, 4.0.11, and 3.6.7. Users are advised to
   upgrade jupyter-server to version 2.7.2 or newer, which includes a fix for
   a redirect vulnerability. No other workaround has been identified. https:/
   /github.com/jupyterlab/jupyterlab/security/advisories/GHSA-44cc-43rp-5947
[1m   CVE-2024-22421[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/64588/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 64588 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in jupyterlab version 4.0.6[0m
[1m   Vulnerability ID: [0m64587
[1m   Affected spec: [0m>=4.0.0,<=4.0.10
[1m   ADVISORY: [0mCVE-2024-22420 describes a vulnerability in JupyterLab,
   where user interaction with a malicious notebook or Markdown file enables
   an attacker to access and act with the same permissions as the user. The
   flaw lies in the table of contents plugin. JupyterLab v4.0.11 includes a
   patch for this issue. Users can manually disable the plugin as a
   workaround. https://github.com/jupyterlab/jupyterlab/security/advisories/G
   HSA-4m77-cmpx-vjc4
[1m   CVE-2024-22420[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/64587/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 64587 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in jupyterlab version 4.0.6[0m
[1m   Vulnerability ID: [0m72962
[1m   Affected spec: [0m>=4.0.0,<=4.2.4
[1m   ADVISORY: [0mJupyterLab is vulnerable to HTML injection, leading to
   DOM Clobbering, which allows attackers to access sensitive data and
   perform arbitrary actions as the compromised user. This vulnerability
   occurs when a user opens a malicious notebook with Markdown cells or a
   Markdown file in JupyterLab.
[1m   CVE-2024-43805[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/72962/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 72962 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in jupyter-server version 2.7.3[0m
[1m   Vulnerability ID: [0m71628
[1m   Affected spec: [0m<2.14.1
[1m   ADVISORY: [0mJupyter Server on Windows has a vulnerability that lets
   unauthenticated attackers leak the NTLMv2 password hash of the Windows
   user running the Jupyter server. An attacker can crack this password to
   gain access to the Windows machine hosting the Jupyter server, or access
   other network-accessible machines or 3rd party services using that
   credential. Or an attacker perform an NTLM relay attack without cracking
   the credential to gain access to other network-accessible machines. This
   only affects Windows users
[1m   CVE-2024-35178[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/71628/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 71628 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in jupyter-server version 2.7.3[0m
[1m   Vulnerability ID: [0m65358
[1m   Affected spec: [0m<2.11.2
[1m   ADVISORY: [0mThe Jupyter Server provides the backend (i.e. the core
   services, APIs, and REST endpoints) for Jupyter web applications like
   Jupyter notebook, JupyterLab, and Voila. Unhandled errors in API requests
   coming from an authenticated user include traceback information, which can
   include path information. There is no known mechanism by which to trigger
   these errors without authentication, so the paths revealed are not
   considered particularly sensitive, given that the requesting user has
   arbitrary execution permissions already in the same environment. A fix has
   been introduced in commit `0056c3aa52` which no longer includes traceback
   information in JSON error responses. For compatibility, the traceback
   field is present, but always empty. This commit has been included in
   version 2.11.2. Users are advised to upgrade. There are no known
   workarounds for this vulnerability.
[1m   CVE-2023-49080[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/65358/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 65358 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in jupyter-lsp version 2.2.0[0m
[1m   Vulnerability ID: [0m66712
[1m   Affected spec: [0m<=2.2.1
[1m   ADVISORY: [0mjupyter-lsp is a coding assistance tool for JupyterLab
   (code navigation + hover suggestions + linters + autocompletion + rename)
   using Language Server Protocol. Installations of jupyter-lsp running in
   environments without configured file system access control (on the
   operating system level), and with jupyter-server instances exposed to non-
   trusted network are vulnerable to unauthorised access and modification of
   file system beyond the jupyter root directory. This issue has been patched
   in version 2.2.2 and all users are advised to upgrade. Users unable to
   upgrade should uninstall jupyter-lsp.
[1m   CVE-2024-22415[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/66712/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 66712 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in jinja2 version 3.1.2[0m
[1m   Vulnerability ID: [0m64227
[1m   Affected spec: [0m<3.1.3
[1m   ADVISORY: [0mJinja is an extensible templating engine. Special
   placeholders in the template allow writing code similar to Python syntax.
   It is possible to inject arbitrary HTML attributes into the rendered HTML
   template, potentially leading to Cross-Site Scripting (XSS). The Jinja
   `xmlattr` filter can be abused to inject arbitrary HTML attribute keys and
   values, bypassing the auto escaping mechanism and potentially leading to
   XSS. It may also be possible to bypass attribute validation checks if they
   are blacklist-based.
[1m   CVE-2024-22195[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/64227/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 64227 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in jinja2 version 3.1.2[0m
[1m   Vulnerability ID: [0m71591
[1m   Affected spec: [0m<3.1.4
[1m   ADVISORY: [0mJinja is an extensible templating engine. The `xmlattr`
   filter in affected versions of Jinja accepts keys containing non-attribute
   characters. XML/HTML attributes cannot contain spaces, `/`, `>`, or `=`,
   as each would then be interpreted as starting a separate attribute. If an
   application accepts keys (as opposed to only values) as user input, and
   renders these in pages that other users see as well, an attacker could use
   this to inject other attributes and perform XSS. The fix for
   CVE-2024-22195 only addressed spaces but not other characters. Accepting
   keys as user input is now explicitly considered an unintended use case of
   the `xmlattr` filter, and code that does so without otherwise validating
   the input should be flagged as insecure, regardless of Jinja version.
   Accepting _values_ as user input continues to be safe.
[1m   CVE-2024-34064[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/71591/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 71591 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in jinja2 version 3.1.2[0m
[1m   Vulnerability ID: [0m75976
[1m   Affected spec: [0m<3.1.6
[1m   ADVISORY: [0mPrior to 3.1.6, an oversight in how the Jinja sandboxed
   environment interacts with the |attr filter allows an attacker that
   controls the content of a template to execute arbitrary Python code. To
   exploit the vulnerability, an attacker needs to control the content of a
   template. Whether that is the case depends on the type of application
   using Jinja. This vulnerability impacts users of applications which
   execute untrusted templates. Jinja's sandbox does catch calls to
   str.format and ensures they don't escape the sandbox. However, it's
   possible to use the |attr filter to get a reference to a string's plain
   format method, bypassing the sandbox. After the fix, the |attr filter no
   longer bypasses the environment's attribute lookup. This vulnerability is
   fixed in 3.1.6.
[1m   CVE-2025-27516[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/75976/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 75976 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in jinja2 version 3.1.2[0m
[1m   Vulnerability ID: [0m76378
[1m   Affected spec: [0m<3.1.5
[1m   ADVISORY: [0mAn oversight in how the Jinja sandboxed environment
   detects calls to str.format allows an attacker who controls the content of
   a template to execute arbitrary Python code. To exploit the vulnerability,
   an attacker needs to control the content of a template. Whether that is
   the case depends on the type of application using Jinja. This
   vulnerability impacts users of applications which execute untrusted
   templates. Jinja's sandbox does catch calls to str.format and ensures they
   don't escape the sandbox. However, it's possible to store a reference to a
   malicious string's format method, then pass that to a filter that calls
   it. No such filters are built-in to Jinja, but could be present through
   custom filters in an application. After the fix, such indirect calls are
   also handled by the sandbox.
[1m   CVE-2024-56326[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/76378/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 76378 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in jinja2 version 3.1.2[0m
[1m   Vulnerability ID: [0m74735
[1m   Affected spec: [0m<3.1.5
[1m   ADVISORY: [0mA vulnerability in the Jinja compiler allows an attacker
   who can control both the content and filename of a template to execute
   arbitrary Python code, bypassing Jinja's sandbox protections. To exploit
   this vulnerability, an attacker must have the ability to manipulate both
   the template's filename and its contents. The risk depends on the
   application's specific use case. This issue affects applications that
   render untrusted templates where the attacker can determine the template
   filename, potentially leading to severe security breaches.
[1m   CVE-2024-56201[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/74735/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 74735 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in idna version 3.3[0m
[1m   Vulnerability ID: [0m67895
[1m   Affected spec: [0m<3.7
[1m   ADVISORY: [0mAffected versions of Idna are vulnerable to Denial Of
   Service via the idna.encode(), where a specially crafted argument could
   lead to significant resource consumption. In version 3.7, this function
   has been updated to reject such inputs efficiently, minimizing resource
   use. A practical workaround involves enforcing a maximum domain name
   length of 253 characters before encoding, as the vulnerability is
   triggered by unusually large inputs that normal operations wouldn't
   encounter.
[1m   CVE-2024-3651[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/67895/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 67895 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in future version 0.18.2[0m
[1m   Vulnerability ID: [0m52510
[1m   Affected spec: [0m<=0.18.2
[1m   ADVISORY: [0mFuture 0.18.2 and earlier allows remote attackers to
   cause a denial of service via crafted Set-Cookie header from malicious web
   server.https://github.com/PythonCharmers/python-future/blob/master/src/fut
   ure/backports/http/cookiejar.py#L215https://github.com/python/cpython/pull
   /17157
[1m   CVE-2022-40899[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/52510/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 52510 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in flask version 2.2.3[0m
[1m   Vulnerability ID: [0m77323
[1m   Affected spec: [0m<3.1.1
[1m   ADVISORY: [0mAffected versions of Flask (≤ 3.1.0) are vulnerable to
   incorrect fallback key configuration in session signing, leading to stale
   key usage instead of the intended current key. This flaw undermines
   session integrity, enabling remote attackers to forge or tamper with
   cookies via manipulated SECRET_KEY_FALLBACKS parameters. The vulnerability
   exists in the itsdangerous-based signing routines within flask.sessions
   (fallback key list ordering).
[1m   CVE-2025-47278[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/77323/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 77323 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in flask version 2.2.3[0m
[1m   Vulnerability ID: [0m55261
[1m   Affected spec: [0m<2.2.5
[1m   ADVISORY: [0mFlask 2.2.5 and 2.3.2 include a fix for CVE-2023-30861:
   When all of the following conditions are met, a response containing data
   intended for one client may be cached and subsequently sent by the proxy
   to other clients. If the proxy also caches 'Set-Cookie' headers, it may
   send one client's 'session' cookie to other clients. The severity depends
   on the application's use of the session and the proxy's behavior regarding
   cookies. The risk depends on all these conditions being met:1. The
   application must be hosted behind a caching proxy that does not strip
   cookies or ignore responses with cookies.2. The application sets
   'session.permanent = True'3. The application does not access or modify the
   session at any point during a request.4. 'SESSION_REFRESH_EACH_REQUEST'
   enabled (the default).5. The application does not set a 'Cache-Control'
   header to indicate that a page is private or should not be cached.This
   happens because vulnerable versions of Flask only set the 'Vary: Cookie'
   header when the session is accessed or modified, not when it is refreshed
   (re-sent to update the expiration) without being accessed or
   modified.https://github.com/pallets/flask/security/advisories/GHSA-m2qf-
   hxjv-5gpq
[1m   CVE-2023-30861[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/55261/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 55261 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in dnspython version 2.1.0[0m
[1m   Vulnerability ID: [0m65401
[1m   Affected spec: [0m<2.6.0
[1m   ADVISORY: [0mDnspython affected versions are vulnerable to a DoS
   vulnerability highlighted in the "TuDoor" paper, where spoofed DNS
   responses could disrupt service. The update prevents denial of service by
   ignoring malicious packets, allowing the resolver to wait for valid
   responses until a query's timeout. This mitigation ensures continued
   service despite attempted attacks, enhancing the resolver's reliability
   and security.
[1m   CVE-2023-29483[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/65401/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 65401 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m62556
[1m   Affected spec: [0m>=3.1,<41.0.6
[1m   ADVISORY: [0mAffected versions of Cryptography are vulnerable to
   NULL-dereference when loading PKCS7 certificates. Calling
   'load_pem_pkcs7_certificates' or 'load_der_pkcs7_certificates' could lead
   to a NULL-pointer dereference and segfault. Exploitation of this
   vulnerability poses a serious risk of Denial of Service (DoS) for any
   application attempting to deserialize a PKCS7 blob/certificate. The
   consequences extend to potential disruptions in system availability and
   stability.
[1m   CVE-2023-49083[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/62556/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 62556 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m71680
[1m   Affected spec: [0m<42.0.2
[1m   ADVISORY: [0mThe cryptography library has updated its OpenSSL
   dependency in CI due to security concerns. This vulnerability arises when
   processing maliciously formatted PKCS12 files, which can cause OpenSSL to
   crash, leading to a potential Denial of Service (DoS) attack. PKCS12
   files, often containing certificates and keys, may come from untrusted
   sources. The PKCS12 specification allows certain fields to be NULL, but
   OpenSSL does not correctly handle these cases, resulting in a NULL pointer
   dereference and subsequent crash. Applications using OpenSSL APIs, such as
   PKCS12_parse(), PKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(),
   PKCS12_unpack_authsafes(), and PKCS12_newpass(), are vulnerable if they
   process PKCS12 files from untrusted sources. Although a similar issue in
   SMIME_write_PKCS7() was fixed, it is not considered significant for
   security as it pertains to data writing. This issue does not affect the
   FIPS modules in versions 3.2, 3.1, and 3.0.
[1m   CVE-2024-0727[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/71680/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 71680 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m62452
[1m   Affected spec: [0m<41.0.5
[1m   ADVISORY: [0mCryptography 41.0.5 updates Windows, macOS, and Linux
   wheels to be compiled with OpenSSL 3.1.4, that includes a security fix.
[1m   CVE-2023-5363[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/62452/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 62452 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m71681
[1m   Affected spec: [0m<42.0.8
[1m   ADVISORY: [0mThe `cryptography` library has updated its BoringSSL and
   OpenSSL dependencies in CI due to a security concern. Specifically, the
   issue involves the functions `EVP_PKEY_param_check()` and
   `EVP_PKEY_public_check()`, which are used to check DSA public keys or
   parameters. These functions can experience significant delays when
   processing excessively long DSA keys or parameters, potentially leading to
   a Denial of Service (DoS) if the input is from an untrusted source. The
   vulnerability arises because the key and parameter check functions do not
   limit the modulus size during checks, despite OpenSSL not allowing public
   keys with a modulus over 10,000 bits for signature verification. This
   issue affects applications that directly call these functions and the
   OpenSSL `pkey` and `pkeyparam` command-line applications with the `-check`
   option. The OpenSSL SSL/TLS implementation is not impacted, but the
   OpenSSL 3.0 and 3.1 FIPS providers are affected by this vulnerability.
[1m   CVE-2024-4603[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/71681/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 71681 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m59473
[1m   Affected spec: [0m<41.0.2
[1m   ADVISORY: [0mThe cryptography package before 41.0.2 for Python
   mishandles SSH certificates that have critical options.
[1m   CVE-2023-38325[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/59473/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 59473 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m65647
[1m   Affected spec: [0m<42.0.5
[1m   ADVISORY: [0mCryptography version 42.0.5 introduces a limit on the
   number of name constraint checks during X.509 path validation to prevent
   denial of service attacks.https://github.com/pyca/cryptography/commit/4be5
   3bf20cc90cbac01f5f94c5d1aecc5289ba1f
[1m   PVE-2024-65647[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/65647/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 65647 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m53307
[1m   Affected spec: [0m<39.0.1
[1m   ADVISORY: [0mCryptography 39.0.1 updates its dependency 'OpenSSL' to
   v3.0.8 to include security
   fixes.https://github.com/pyca/cryptography/issues/8229
[1m   CVE-2023-0401[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/53307/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 53307 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m53301
[1m   Affected spec: [0m<39.0.1
[1m   ADVISORY: [0mCryptography 39.0.1 updates its dependency 'OpenSSL' to
   v3.0.8 to include security
   fixes.https://github.com/pyca/cryptography/issues/8229
[1m   CVE-2022-4203[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/53301/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 53301 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m53306
[1m   Affected spec: [0m<39.0.1
[1m   ADVISORY: [0mCryptography 39.0.1 updates its dependency 'OpenSSL' to
   v3.0.8 to include security
   fixes.https://github.com/pyca/cryptography/issues/8229
[1m   CVE-2023-0217[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/53306/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 53306 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m53299
[1m   Affected spec: [0m<39.0.1
[1m   ADVISORY: [0mCryptography 39.0.1 updates its dependency 'OpenSSL' to
   v3.0.8 to include security
   fixes.https://github.com/pyca/cryptography/issues/8229
[1m   CVE-2022-4450[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/53299/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 53299 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m53302
[1m   Affected spec: [0m<39.0.1
[1m   ADVISORY: [0mCryptography 39.0.1 updates its dependency 'OpenSSL' to
   v3.0.8 to include security
   fixes.https://github.com/pyca/cryptography/issues/8229
[1m   CVE-2023-0216[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/53302/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 53302 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m53298
[1m   Affected spec: [0m<39.0.1
[1m   ADVISORY: [0mCryptography 39.0.1 includes a fix for CVE-2022-3996, a
   DoS vulnerability affecting
   openssl.https://github.com/pyca/cryptography/issues/7940
[1m   CVE-2022-3996[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/53298/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 53298 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m53305
[1m   Affected spec: [0m<39.0.1
[1m   ADVISORY: [0mCryptography 39.0.1 updates its dependency 'OpenSSL' to
   v3.0.8 to include security
   fixes.https://github.com/pyca/cryptography/issues/8229
[1m   CVE-2023-0215[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/53305/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 53305 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m53304
[1m   Affected spec: [0m<39.0.1
[1m   ADVISORY: [0mCryptography 39.0.1 updates its dependency 'OpenSSL' to
   v3.0.8 to include security
   fixes.https://github.com/pyca/cryptography/issues/8229
[1m   CVE-2023-0286[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/53304/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 53304 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m53303
[1m   Affected spec: [0m<39.0.1
[1m   ADVISORY: [0mCryptography 39.0.1 updates its dependency 'OpenSSL' to
   v3.0.8 to include security
   fixes.https://github.com/pyca/cryptography/issues/8229
[1m   CVE-2022-4304[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/53303/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 53303 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m59062
[1m   Affected spec: [0m<41.0.0
[1m   ADVISORY: [0mCryptography 41.0.0 updates its dependency 'OpenSSL' to
   v3.1.1 to include a security fix.https://github.com/pyca/cryptography/comm
   it/8708245ccdeaff21d65eea68a4f8d2a7c5949a22
[1m   CVE-2023-2650[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/59062/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 59062 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m60223
[1m   Affected spec: [0m>=0.8,<41.0.3
[1m   ADVISORY: [0mCryptography 41.0.3 updates its bundled OpenSSL version
   to include a fix for a Denial of Service vulnerability.https://github.com/
   pyca/cryptography/commit/b22271cf3c3dd8dc8978f8f4b00b5c7060b6538dhttps://w
   ww.openssl.org/news/secadv/20230731.txt
[1m   CVE-2023-3817[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/60223/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 60223 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m60225
[1m   Affected spec: [0m>=0.8,<41.0.3
[1m   ADVISORY: [0mCryptography 41.0.3 updates its bundled OpenSSL version
   to include a fix for a Denial of Service vulnerability.https://github.com/
   pyca/cryptography/commit/bfa4d95f0f356f2d535efd5c775e0fb3efe90ef2https://w
   ww.openssl.org/news/secadv/20230719.txt
[1m   CVE-2023-3446[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/60225/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 60225 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m60224
[1m   Affected spec: [0m>=0.8,<41.0.3
[1m   ADVISORY: [0mCryptography 41.0.3  updates its bundled OpenSSL version
   to include a fix for CVE-2023-2975: AES-SIV implementation ignores empty
   associated data entries.https://github.com/pyca/cryptography/commit/bfa4d9
   5f0f356f2d535efd5c775e0fb3efe90ef2https://www.openssl.org/news/secadv/2023
   0714.txt
[1m   CVE-2023-2975[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/60224/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 60224 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m53048
[1m   Affected spec: [0m>=1.8,<39.0.1
[1m   ADVISORY: [0mCryptography 39.0.1 includes a fix for CVE-2023-23931:
   In affected versions 'Cipher.update_into' would accept Python objects
   which implement the buffer protocol, but provide only immutable buffers.
   This would allow immutable objects (such as 'bytes') to be mutated, thus
   violating fundamental rules of Python and resulting in corrupted output.
   This issue has been present since 'update_into' was originally introduced
   in cryptography 1.8.
[1m   CVE-2023-23931[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/53048/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 53048 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m62451
[1m   Affected spec: [0m<41.0.4
[1m   ADVISORY: [0mCryptography 41.0.4 updates Windows, macOS, and Linux
   wheels to be compiled with OpenSSL 3.1.3, that includes a security fix.htt
   ps://github.com/pyca/cryptography/commit/fc11bce6930e591ce26a2317b31b9ce2b
   3e25512
[1m   CVE-2023-4807[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/62451/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 62451 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m65278
[1m   Affected spec: [0m<42.0.0
[1m   ADVISORY: [0mAffected versions of Cryptography may allow a remote
   attacker to decrypt captured messages in TLS servers that use RSA key
   exchanges, which may lead to exposure of confidential or sensitive data.
[1m   CVE-2023-50782[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/65278/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 65278 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in cryptography version 3.4.8[0m
[1m   Vulnerability ID: [0m65510
[1m   Affected spec: [0m<42.0.0
[1m   ADVISORY: [0mCryptography starting from version 42.0.0 updates its CI
   configurations to use newer versions of BoringSSL or OpenSSL as a
   countermeasure to CVE-2023-5678. This vulnerability, affecting the
   package, could cause Denial of Service through specific DH key generation
   and verification functions when given overly long parameters.
[1m   CVE-2023-5678[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/65510/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 65510 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in certifi version 2020.6.20[0m
[1m   Vulnerability ID: [0m59956
[1m   Affected spec: [0m>=2015.04.28,<2023.07.22
[1m   ADVISORY: [0mCertifi 2023.07.22 includes a fix for CVE-2023-37920:
   Certifi prior to version 2023.07.22 recognizes "e-Tugra" root
   certificates. e-Tugra's root certificates were subject to an investigation
   prompted by reporting of security issues in their systems. Certifi
   2023.07.22 removes root certificates from "e-Tugra" from the root
   store.https://github.com/certifi/python-certifi/security/advisories/GHSA-
   xqr8-7jwr-rhp7
[1m   CVE-2023-37920[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/59956/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 59956 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in certifi version 2020.6.20[0m
[1m   Vulnerability ID: [0m52365
[1m   Affected spec: [0m<2022.12.07
[1m   ADVISORY: [0mCertifi 2022.12.07 includes a fix for CVE-2022-23491:
   Certifi 2022.12.07 removes root certificates from "TrustCor" from the root
   store. These are in the process of being removed from Mozilla's trust
   store. TrustCor's root certificates are being removed pursuant to an
   investigation prompted by media reporting that TrustCor's ownership also
   operated a business that produced spyware. Conclusions of Mozilla's
   investigation can be found in the linked google group discussion.
[1m   CVE-2022-23491[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/52365/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 52365 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in anyio version 4.0.0[0m
[1m   Vulnerability ID: [0m71199
[1m   Affected spec: [0m<4.4.0
[1m   ADVISORY: [0mAnyio version 4.4.0 addresses a thread race condition in
   `_eventloop.get_asynclib()` that caused crashes when multiple event loops
   of the same backend were running in separate threads and simultaneously
   attempted to use AnyIO for the first time. This fix ensures more stable
   and reliable performance in multi-threaded environments.
[1m   PVE-2024-71199[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/71199/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 71199 in safety’s
   ignore command-line argument or add the ignore to your safety policy file.


+==============================================================================+
   [32m[1mREMEDIATIONS[0m

  73 vulnerabilities were reported in 25 packages. For detailed remediation & 
  fix recommendations, upgrade to a commercial license. 

+==============================================================================+

 Scan was completed. 73 vulnerabilities were reported. 

+==============================================================================+[0m


[33m[1m+===========================================================================================================================================================================================+[0m


[31m[1mDEPRECATED: [0m[33m[1mthis command (`check`) has been DEPRECATED, and will be unsupported beyond 01 June 2024.[0m


[32mWe highly encourage switching to the new [0m[32m[1m`scan`[0m[32m command which is easier to use, more powerful, and can be set up to mimic the deprecated command if required.[0m


[33m[1m+===========================================================================================================================================================================================+[0m


